---

# An example illustrating how QD algorithms can automatically discover the feature descriptors of a Grid container.
# Here we use a methodology similar to the AURORA algorithm (Cully2019: https://arxiv.org/pdf/1905.11874.pdf) where an autoencoder is continuously trained during the optimization process on all individuals found so far. The latent space of this autoencoder is used as the feature descriptors of the grid.
# In order to achieve that, grids have to periodically recompute the feature descriptors of all individual found so far. So it implies that all individuals should be stored in additional container. This is achieved in QDpy by using hierarchies of containers, where a (child) container can forward all individuals it encounters to a parent container. Here, the child container is the main Grid, and the parent is an archive containing all individuals found so far.
# Latent spaces of different autoencoders tend to have different domains (e.g. one autoencoder would operate in the [-1., 1.] domain, another on [-5., -1.]) even when they were trained on the same dataset. As such, we use AutoScalingGrid containers instead of just Grid. Such containers periodically adjust their feature descriptors domains to match all previously encountered individuals.


# The random seed
#seed: 42

save_parent: False
batch_mode: False
send_several_suggestions_to_fn: True
max_nb_suggestions_per_call: 10

# Type of experiment
experiment_type: bipedal_walker

debug_features: False # set to True to determine feature domain bounds
indv_eps: 5       # episodes per individual
max_episode_length: 300
bipedal_scores_type: mean30

# KLC
klc_reference_data_file: data/bipedalM30-100000.p
klc_scores_names: ["meanDistance", "meanHeadStability", "meanTorquePerStep", "meanJump", "meanLeg0HipAngle", "meanLeg1HipAngle", "meanLeg0KneeAngle", "meanLeg1KneeAngle"]
klc_nb_bins: 10
klc_epsilon: 1e-20

reference_data_file: "data/bipedalM30-random-10000.p"

fitness_type: "meanAvgReward"
meanAvgRewardDomain: [-200., 350.]

#features_list: ["meanDistance", "meanHeadStability"]
#meanDistanceDomain: [0., 50.]
#meanHeadStabilityDomain: [0., 2.5]
#meanTorquePerStepDomain: [0., 25.]
#meanJumpDomain: [0., 0.75]
#meanLeg0HipAngleDomain: [0., 2.5]
#meanLeg0HipSpeedDomain: [0., 10.]
#meanLeg0KneeAngleDomain: [0., 2.5]
#meanLeg0KneeSpeedDomain: [0., 10.]
#meanLeg1HipAngleDomain: [0., 2.5]
#meanLeg1HipSpeedDomain: [0., 10.]
#meanLeg1KneeAngleDomain: [0., 2.5]
#meanLeg1KneeSpeedDomain: [0., 10.]


game: 
    env_name: 'BipedalWalker-v2'
    input_size: 24
    output_size: 4
    time_factor: 0
    layers: [40, 40]
    activation: 'tanh'
    noise_bias: 0.0
    output_noise: [False, False, False]
    rnn_mode: False


# The name of the main algorithm (see below the description of 'algoQD')
main_algorithm_name: algoTotal

to_grid_parameters:
    max_items_per_bin: 1                              # The number of items in each bin of the grid
#    shape: [10, 10]                                   # The number of bins for each feature


# The list of all container.
containers:

    # Grid parameters
    max_items_per_bin: 1                              # The number of items in each bin of the grid
    fitness_scaling: False                            # Whether to autoscale the fitness or not
    features_scaling: True                            # Whether to autoscale the features or not
    rescaling_period: 0                            # When to perform the autoscaling operation. Here it's done every time 1000 individuals are added.
    shape: [10, 10]                                   # The number of bins for each feature

    # Novelty Archive parameters
    k: 15
    k_resolution: 60000 # 3000
    threshold_novelty: 0.0075 # 0.01 # 0.1
    epsilon_dominance: True
    epsilon: 0.1
    rebalancing_period: 0
    compute_new_threshold_period: 0


    # Feature extraction decorator parameters
    model_type: ConvAE
    initial_nb_epochs: 50                            # The number of epochs used the first time the model is optimised
    nb_epochs: 100                                     # The number of epochs used for subsequent training processes
    learning_rate: 0.10 # 1.e-3                              # Learning rate of the training (by default, the Adam optimiser is used to train the model)
    training_period: 5000                             # Re-train the model every time `training_period` add operations are performed
    div_coeff: 0.0 # 0.01
    batch_size: 1024
    diversity_loss_computation: none # covlatent # outputs # pwoutputs #outputs
    #base_scores: ["0", "1"]
    reset_model_every_training: False
    train_only_on_last_inds: False
    tanh_encoder: True
    training_period_type: linear # exp_decay
    nb_filters: 4
    nb_channels: 60
    batch_norm_before_latent: False
    trainer_type: NNTrainer
    train_at_first_it: True
    latent_normalisation: "quartile"

    epochs_avg_loss: 500
    validation_split: 0.25
    nb_training_sessions: 1
    max_dataset_size: 30000

    disable_parents_pickling: True

    only_add_accepted_inds_to_parents: True
    storage_type: indexableset              # Faster than 'orderedset' but may have compatibility problems with pickle in some versions


    parentContainer:                             # We create a container that will contain ALL tested individuals
        type: Container                          # A simple container, that will store ALL added individuals that are within bounds
        name: parentContainer                    # The name of the container. Optional. Default to the parent key (here also 'cont0')
        fitness_domain:
        features_domain:

    grid1:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid2:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid3:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid4:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid5:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid6:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid7:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid8:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid9:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid10:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid11:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid12:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid13:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid14:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid15:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid16:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid17:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid18:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid19:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid20:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid21:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid22:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid23:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid24:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features

    grid25:                                                # The main grid container
        type: Grid                             # The type of the container. Here we use an AutoScalingGrid that periodically adjust the feature descriptors domains to match the individuals encountered so far
        parents: [parentContainer]                        # The list of parent containers. Every individual added to `cont0` will be also forwarded to the parents
        scaling_containers: [parentContainer]             # The list of containers used to store individuals added after a rescaling operation. If empty, will use the parents instead.
        fitness_domain: [[-200., 350.]]
        features_domain: [[0., 1.], [0., 1.]]             # The initial domain of each feature. Must be specified here even if the container will autoscale the domains, to set the number of features




    cont1:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid1                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont2:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid2                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont3:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid3                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont4:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid4                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont5:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid5                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont6:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid6                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont7:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid7                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont8:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid8                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont9:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid9                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont10:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid10                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont11:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid11                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont12:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid12                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont13:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid13                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont14:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid14                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont15:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid15                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont16:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid16                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont17:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid17                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont18:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid18                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont19:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid19                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont20:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid20                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont21:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid21                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont22:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid22                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont23:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid23                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont24:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid24                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.

    cont25:                                                # A feature-extracting container decorator applied to the main grid
        type: TorchMultiFeatureExtractionContainerDecorator    # The type of the container. This decorator type uses PyTorch models (autoencoders) as a feature reduction method
        container: grid25                                  # The container this decorator is applied to
        training_containers: [parentContainer]            # The list of containers used to train the autoencoder. If empty, will use the parents instead.



# The list of all algorithms
algorithms:
    # Default parameter values for each algorithm
    #optimisation_task: minimisation   # We perform maximisation of all fitness objectives
    #dimension: 5                      # The number of dimensions of the problem. For rastrigin, any dimension >= 2 can be chosen
    #ind_domain: [0.1, 0.9]              # The domain of each value of the genome (optional)

    # Evolution parameters
    batch_size: 1000     # The number of evaluations in each subsequent batch
    sel_pb: 0.9 # 1.0         # The probability of performing selection+variation instead of initialising a new genome
    init_pb: 0.1 # 0.0        # The probability of initiating a new genome instead of performing selection
    mut_pb: 0.1 # 0.1         # The probability of mutating each value of the genome of a selected individual
    eta: 20. # 10           # The ETA parameter of the polynomial mutation (as defined in the origin NSGA-II paper by Deb.). It corresponds to the crowding degree of the mutation. A high ETA will produce mutants close to its parent, a small ETA will produce offspring with more changes.


    # Then, we use an evolutionary algorithm that perform random search and polynomial mutations. This algorithm makes a trade-off between quality (finding good performing solutions) and diversity (find solutions corresponding to each bin of the grid)
    algo1:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont1                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo2:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont2                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo3:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont3                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo4:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont4                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo5:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont5                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo6:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont6                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo7:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont7                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo8:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont8                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo9:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont9                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo10:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont10                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo11:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont11                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo12:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont12                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo13:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont13                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo14:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont14                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo15:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont15                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo16:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont16                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo17:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont17                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo18:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont18                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo19:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont19                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo20:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont20                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo21:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont21                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo22:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont22                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo23:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont23                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo24:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont24                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm

    algo25:
        type: ScoreProportionateRouletteMutPolyBounded
        container: cont25                  # The container to use to store individuals told to the optimisers
        budget: .inf       # The total number of allowed evaluations for this algorithm


    algoTotal:
        #type: MEMAPElitesUCB1
        type: AlternatingAlgWrapper
        #type: SqAlgWrapper
#        batch_size: 100     # The number of evaluations in each subsequent batch
        #batch_mode: True
        budget: 300000
        tell_container_when_switching: False
        tell_all: False
        #tell_container_when_switching: True               # Whether to tell the next algorithm in the list all results of the previous algorithm
        #algorithms: ['algo1', 'algo2', 'algo3', 'algo4'] # The list of algorithms to execute
        algorithms: ['algo1', 'algo2', 'algo3', 'algo4', 'algo5', 'algo6', 'algo7', 'algo8', 'algo9', 'algo10', 'algo11', 'algo12', 'algo13', 'algo14', 'algo15', 'algo16', 'algo17', 'algo18', 'algo19', 'algo20', 'algo21', 'algo22', 'algo23', 'algo24', 'algo25'] # The list of algorithms to execute


# MODELINE "{{{1
# vim:expandtab:softtabstop=4:shiftwidth=4:fileencoding=utf-8
# vim:foldmethod=marker
